# -*- coding: utf-8 -*-
"""Part_B_RNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqWWTEReQmASpuvF8Y0fhFb6pgldlteA

### RNN
"""

# Loading Data
from google.colab import drive
drive.mount('/content/drive')

# Import dependencies
import numpy as np
import pandas
import tensorflow as tf
import csv
import pylab as plt
import time

# Constants
MAX_DOCUMENT_LENGTH = 100
HIDDEN_SIZE = 20
MAX_LABEL = 15
EMBEDDING_SIZE = 50
n_char = 256
batch_size = 128

no_epochs = 2
lr = 0.01

tf.logging.set_verbosity(tf.logging.ERROR)
seed = 10
tf.set_random_seed(seed)

# Loading Data (words)
def data_read_words():
  
  x_train, y_train, x_test, y_test = [], [], [], []
  
  with open('drive/My Drive/train_medium.csv', encoding='utf-8') as filex:
    reader = csv.reader(filex)
    for row in reader:
      x_train.append(row[2])
      y_train.append(int(row[0]))

  with open("drive/My Drive/train_medium.csv", encoding='utf-8') as filex:
    reader = csv.reader(filex)
    for row in reader:
      x_test.append(row[2])
      y_test.append(int(row[0]))
  
  x_train = pandas.Series(x_train)
  y_train = pandas.Series(y_train)
  x_test = pandas.Series(x_test)
  y_test = pandas.Series(y_test)
  y_train = y_train.values
  y_test = y_test.values
  
  # Learn the vocabulary dictionary and return indexes of words.
  vocab_processor = tf.contrib.learn.preprocessing.VocabularyProcessor(
      MAX_DOCUMENT_LENGTH)

  x_transform_train = vocab_processor.fit_transform(x_train)
  x_transform_test = vocab_processor.transform(x_test)

  x_train = np.array(list(x_transform_train))
  x_test = np.array(list(x_transform_test))

  no_words = len(vocab_processor.vocabulary_)
  print('Total words: %d' % no_words)

  return x_train, y_train, x_test, y_test, no_words

# Loading Data (Char)
def data_read_chars():
  
  x_train, y_train, x_test, y_test = [], [], [], []

  with open('/content/drive/My Drive/CZ4042 Coursework/Ass2/data/train_medium.csv', encoding='utf-8') as filex:
    reader = csv.reader(filex)
    for row in reader:
      x_train.append(row[1])
      y_train.append(int(row[0]))

  with open("/content/drive/My Drive/CZ4042 Coursework/Ass2/data/test_medium.csv", encoding='utf-8') as filex:
    reader = csv.reader(filex)
    for row in reader:
      x_test.append(row[1])
      y_test.append(int(row[0]))
  
  x_train = pandas.Series(x_train)
  y_train = pandas.Series(y_train)
  x_test = pandas.Series(x_test)
  y_test = pandas.Series(y_test)
  
  # Converts char to ASCII representation
  char_processor = tf.contrib.learn.preprocessing.ByteProcessor(MAX_DOCUMENT_LENGTH) 
  x_train = np.array(list(char_processor.fit_transform(x_train)))
  x_test = np.array(list(char_processor.transform(x_test)))
  y_train = y_train.values
  y_test = y_test.values
  
  return x_train, y_train, x_test, y_test

# RNN Model for character level
def rnn_char_model(x, dropoutBoolean):

  byte_vectors = tf.one_hot(x, n_char)
  byte_list = tf.unstack(byte_vectors, axis=1)

  cell = tf.nn.rnn_cell.GRUCell(HIDDEN_SIZE)
  if dropoutBoolean:
    cell = tf.contrib.rnn.DropoutWrapper(cell,input_keep_prob=dropout, output_keep_prob=dropout)
  _, encoding = tf.nn.static_rnn(cell, byte_list, dtype=tf.float32)

  logits = tf.layers.dense(encoding, MAX_LABEL, activation=None)

  return logits, byte_list

# RNN Model for word level
def rnn_word_model(x, dropoutBoolean):

  word_vectors = tf.contrib.layers.embed_sequence(
      x, vocab_size=n_words, embed_dim=EMBEDDING_SIZE)

  word_list = tf.unstack(word_vectors, axis=1)

  cell = tf.nn.rnn_cell.GRUCell(HIDDEN_SIZE)
  if dropoutBoolean:
    cell = tf.contrib.rnn.DropoutWrapper(cell,input_keep_prob=dropout, output_keep_prob=dropout)
  _, encoding = tf.nn.static_rnn(cell, word_list, dtype=tf.float32)

  print(_)
  print(encoding)
  logits = tf.layers.dense(encoding, MAX_LABEL, activation=None)

  return logits, word_list

# Vanilla RNN Model
def vanilla_rnn(x, dropoutBoolean):
  word_vectors = tf.contrib.layers.embed_sequence(x, vocab_size=n_words, embed_dim=EMBEDDING_SIZE)

  word_list = tf.unstack(word_vectors, axis=1)

  cell = tf.nn.rnn_cell.BasicRNNCell(HIDDEN_SIZE)
  if dropoutBoolean:
    cell = tf.contrib.rnn.DropoutWrapper(cell,input_keep_prob=dropout, output_keep_prob=dropout)
  _, encoding = tf.nn.static_rnn(cell, word_list, dtype=tf.float32)

  logits = tf.layers.dense(encoding, MAX_LABEL, activation=None)

  return logits, word_list


# LSTM RNN Model
def lstm_rnn(x, dropoutBoolean):

  word_vectors = tf.contrib.layers.embed_sequence(x, vocab_size=n_words, embed_dim=EMBEDDING_SIZE)
  word_list = tf.unstack(word_vectors, axis=1)

  cell = tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE)
  if dropoutBoolean:
    cell = tf.contrib.rnn.DropoutWrapper(cell,input_keep_prob=dropout, output_keep_prob=dropout)
  outputs, states = tf.nn.static_rnn(cell, word_list, dtype=tf.float32)

  c, h = states
  logits = tf.layers.dense(h, MAX_LABEL, activation=None)

  return logits, word_vectors

# Multi-Layer Model (LSTM)

def multi_lstm_rnn(x):
  word_vectors = tf.contrib.layers.embed_sequence(x, vocab_size=n_words, embed_dim=EMBEDDING_SIZE)

  word_list = tf.unstack(word_vectors, axis=1)

  cell1 = tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE)
  cell2 = tf.nn.rnn_cell.LSTMCell(HIDDEN_SIZE)
  cells = tf.nn.rnn_cell.MultiRNNCell([cell1, cell2])
  outputs, states = tf.nn.static_rnn(cells, word_list, dtype=tf.float32)

  print(outputs)
  print(states)
  cell1,cell2 = states
  print(cell2)
  c,h = cell2
  # output = outputs[-1]

  logits = tf.layers.dense(h, MAX_LABEL, activation=None)

  return logits, word_vectors

# Multi-Layer Model (VANILLA)

def multi_vanilla_rnn(x):
  word_vectors = tf.contrib.layers.embed_sequence(x, vocab_size=n_words, embed_dim=EMBEDDING_SIZE)

  word_list = tf.unstack(word_vectors, axis=1)

  cell1 = tf.nn.rnn_cell.BasicRNNCell(HIDDEN_SIZE)
  cell2 = tf.nn.rnn_cell.BasicRNNCell(HIDDEN_SIZE)
  cells = tf.nn.rnn_cell.MultiRNNCell([cell1, cell2])
  outputs, states = tf.nn.static_rnn(cells, word_list, dtype=tf.float32)

  print(outputs)
  print(states)
  # cell1,cell2 = states
  # print(cell2)
  # c,h = cell2
  output = outputs[-1]

  logits = tf.layers.dense(output, MAX_LABEL, activation=None)

  return logits, word_vectors

# Main 

def main(dropoutBoolean, gradientClipping):
  global n_words

  x_train, y_train, x_test, y_test, n_words = data_read_words()

  # Create the model
  x = tf.placeholder(tf.int64, [None, MAX_DOCUMENT_LENGTH])
  y_ = tf.placeholder(tf.int64)

  # Model to run (to be changed accordingly depending on the RNN cell required to run)
  if dropoutBoolean:
    logits, word_list = rnn_word_model(x,True)
  else:
    logits, word_list = rnn_word_model(x,False)


  entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf.one_hot(y_, MAX_LABEL), logits=logits))
  if gradientClipping:
    optimizer = tf.train.AdamOptimizer(learning_rate=lr)
    gvs = optimizer.compute_gradients(entropy)
    capped_gvs = [(tf.clip_by_value(grad,-2.,2.), var) for grad, var in gvs]
    train_op = optimizer.apply_gradients(capped_gvs)
  else:
    train_op = tf.train.AdamOptimizer(lr).minimize(entropy)

  correct_pred = tf.equal(tf.argmax(logits,1), tf.argmax(tf.one_hot(y_, MAX_LABEL),1))
  correct_pred = tf.cast(correct_pred, tf.float32)
  accuracy = tf.reduce_mean(correct_pred)
    
  starttime = time.time()
  sess = tf.Session()
  sess.run(tf.global_variables_initializer())

  # training
  loss = []
  test_acc = []
  train_acc = []

  N = len(x_train)
  idx = np.arange(N)

  for e in range(no_epochs):
    np.random.shuffle(idx)
    x_train, y_train = x_train[idx], y_train[idx]
          
    for start, end in zip(range(0, N, batch_size), range(batch_size, N, batch_size)):
        sess.run(train_op, {x: x_train[start:end], y_: y_train[start:end]})
    loss.append(sess.run(entropy,feed_dict={x: x_train, y_: y_train}))
    train_acc.append(sess.run(accuracy,feed_dict={x: x_train, y_: y_train}))
    test_acc.append(sess.run(accuracy,feed_dict={x: x_test, y_: y_test}))
	
    if e%10 == 0:
      print('epoch: %d, entropy: %g'%(e, loss[e]))
      print(sess.run(accuracy,feed_dict={x: x_test, y_: y_test}))
  
  time_taken = time.time()-starttime
  print("total time: ", time_taken)
  # # Plotting Train loss
  # plt.figure(figsize=(10,8))  
  # plt.plot(np.arange(no_epochs), loss, label='loss')
  # plt.xlabel('Epochs')
  # plt.ylabel('Loss')
  # plt.title('Entropy on Training Data')

  # Plotting
  plt.figure(figsize=(10,8))  
  plt.plot(np.arange(no_epochs), loss, label='loss')
  plt.plot(np.arange(no_epochs), test_acc, label='test_acc')
  plt.xlabel('Epochs')
  plt.legend()
  plt.ylabel('Accuracy')
  plt.title('LSTM Layer')



if __name__ == '__main__':
  main(False,False)